package day8.boop;

/**
 * @Author 千锋大数据教学团队
 * @Company 千锋好程序员大数据
 * @Date 2020/3/31
 * @Description 类的设计
 */
public class Avengers {
    // 所有的对象共有的特征：特征，使用属性来表示。
    String name;        // 姓名
    int age;            // 年龄
    char gender;        // 性别

    // 所有的对象共有的行为：行为，使用方法来表示。
    void eat() {
        System.out.println(name + "正在吃饭...");
    }
    void sleep() {
        System.out.println(name + "正在睡觉...");
    }
    void beat() {
        System.out.println(name + "正在打豆豆...");
    }


    // static: 表示静态。
    //         可以修饰类中的属性，也可以修饰类中的方法。
    // 静态属性和非静态属性的区别：
    //          1. 空间开辟的时机：非静态的属性，在实例化对象的时候开辟；静态属性，在类第一次加载到内存的时候开辟空间。
    //          2. 空间开辟的位置：非静态的属性，在堆上开辟空间，每一个对象拥有属于自己的属性；
    //                          静态属性，在静态区开辟空间，一个类的一个静态属性只开辟一块空间。所有的对象，共享这块空间。
    //          3. 使用方式不同：非静态属性，是属于对象的，需要使用 对象. 进行访问；
    //                        静态属性，是属于类的。可以被所有的对象共享的。访问的时候使用 类. 进行访问
    // 在设计类的时候，到底用静态的属性，还是非静态的属性？？？
    //          1. 绝大部分情况下，都是使用的非静态的。

    // 静态方法和非静态方法：
    //          1. 调用的方式不一样。非静态方法需要使用对象来调用；静态方法需要使用类来调用。

    // 在设计类的时候，到底用静态的方法，还是非静态的方法？？？
    //          1. 绝大部分情况下，都是使用的非静态的。
    //          2. 基本上，只在设计工具类的时候，会用到静态方法。

    // 类加载常见的时机：
    //          1. 实例化对象的时候
    //          2. 调用静态方法
    //          3. Class.forName() 【暂时不用考虑，到反射部分讲解】
    static int count;
    static void assemble() {

    }
}
